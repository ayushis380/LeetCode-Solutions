class DSU:
    def __init__(self, n):
        self.parent = [i for i in range(n)]
        self.size = [1] * n
    
    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])  # Path compression
        return self.parent[x]
    
    def union(self, x, y):
        rootX = self.find(x)
        rootY = self.find(y)

        if rootX != rootY:
            # Union by size
            if self.size[rootX] > self.size[rootY]:
                self.parent[rootY] = rootX
                self.size[rootX] += self.size[rootY]
            else:
                self.parent[rootX] = rootY
                self.size[rootY] += self.size[rootX]
    
    def get_size(self, x):
        root = self.find(x)
        return self.size[root]


class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        dsu = DSU(n)

        # Step 1: Union all connected nodes
        for i in range(n):
            for j in range(n):
                if i != j and graph[i][j] == 1:
                    dsu.union(i, j)

        # Step 2: Count how many malware nodes are in each connected component
        infected_count = [0] * n  # infected_count[i] = number of malware nodes in component with root i
        for node in initial:
            root = dsu.find(node)
            infected_count[root] += 1

        # Step 3: Find the malware node which, when removed, saves the most nodes
        result = float("inf")
        max_saved = -1
        initial.sort()  # In case of tie, return the node with the smallest index

#  In a connected component (group of nodes all connected either directly or indirectly), if two or more nodes are initially infected, removing just one won't stop the spreadâ€”the other infected node(s) will still infect the whole component.
# But, if only one infected node exists in a component, removing that one infected node will prevent any infection from spreading in that component.
        
        for node in initial:
            root = dsu.find(node)
            if infected_count[root] == 1: # as we can only remove 1 infected node
                saved = dsu.get_size(root)
                if saved > max_saved or (saved == max_saved and node < result):
                    max_saved = saved
                    result = node

        # Step 4: If no such node found, return the one with the smallest index
        return result if result != float("inf") else min(initial)
